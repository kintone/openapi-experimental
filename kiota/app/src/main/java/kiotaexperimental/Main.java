/*
 * This source file was generated by the Gradle 'init' task
 */
package kiotaexperimental;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.microsoft.kiota.MultipartBody;
import com.microsoft.kiota.RequestInformation;
import com.microsoft.kiota.authentication.AnonymousAuthenticationProvider;
import com.microsoft.kiota.authentication.ApiKeyAuthenticationProvider;
import com.microsoft.kiota.authentication.ApiKeyLocation;
import com.microsoft.kiota.authentication.AuthenticationProvider;
import com.microsoft.kiota.bundle.DefaultRequestAdapter;
import jakarta.annotation.Nonnull;
import kiota.client.ApiClient;
import kiota.client.k.v1.app.settingsjson.SettingsJsonRequestBuilder;
import kiota.client.k.v1.filejson.FileJsonRequestBuilder;
import kiota.client.k.v1.preview.app.deployjson.DeployJsonRequestBuilder;
import kiota.client.k.v1.preview.app.deployjson.DeployPostRequestBody;
import kiota.client.k.v1.preview.app.deployjson.DeployPostRequestBodyApps;
import kiota.client.k.v1.preview.app.form.fieldsjson.FieldsGetResponse;
import kiota.client.k.v1.preview.app.form.fieldsjson.FieldsJsonRequestBuilder;
import kiota.client.k.v1.preview.app.form.fieldsjson.GetLangQueryParameterType;
import kiota.client.models.AddAppRequest;
import kiota.client.models.AddAppResponse;
import kiota.client.models.GetAppDeployStatusResponse;
import kiota.client.models.GetAppDeployStatusResponseApps;
import kiota.client.models.GetAppDeployStatusResponseAppsStatus;
import kiota.client.models.GetGeneralAppSettingsResponse;
import kiota.client.models.KintoneRestApiError;
import kiota.client.models.UpdateAppAdminNotesRequest;
import kiota.client.models.UpdateAppAdminNotesResponse;
import kiota.client.models.UploadFileResponse;

import java.io.FileOutputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.Consumer;

import static java.lang.Thread.*;

import java.io.File;

public class Main {
     private static final String BASE_URL = "http://localhost";

    public static void main(String[] args) {
//        uploadFileScenario();
//        downloadFileScenario();
//        anoymousScenario();
//        createAppScenario();
//        errorScenario();
//        apiTokenScenario();
        getFieldScenario();
    }

    private static void anoymousScenario() {
        AnonymousAuthenticationProvider anonymousAuthenticationProvider = new AnonymousAuthenticationProvider();
        DefaultRequestAdapter anonymouseDefaultRequestAdapter = new DefaultRequestAdapter(
                anonymousAuthenticationProvider);
        anonymouseDefaultRequestAdapter.setBaseUrl(BASE_URL);

        ObjectMapper mapper = new ObjectMapper();
        ApiClient anonymousClient = new ApiClient(anonymouseDefaultRequestAdapter);
        try {
            String resp = mapper.writeValueAsString(anonymousClient.k().v1().apisJson().get());
            System.out.println(resp);
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }

    private static void createAppScenario() {
        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider("Administrator", "cybozu");
        DefaultRequestAdapter requestAdapter = new DefaultRequestAdapter(myAuthenticationProvider);
        requestAdapter.setBaseUrl(BASE_URL);
        ApiClient client = new ApiClient(requestAdapter);
        try {
            AddAppRequest addAppRequest = new AddAppRequest();
            addAppRequest.setName("generated by kiota");
            AddAppResponse addAppResponse = client.k().v1().preview().appJson().post(addAppRequest);
            String appId = addAppResponse.getApp();

            DeployPostRequestBodyApps app = new DeployPostRequestBodyApps();
            app.setApp(appId);
            DeployPostRequestBody deployPostRequestBody = new DeployPostRequestBody();
            deployPostRequestBody.setApps(List.of(app));
            client.k().v1().preview().app().deployJson().post(deployPostRequestBody);

            checkAppDeployed(client, appId);

            Consumer<SettingsJsonRequestBuilder.GetRequestConfiguration> settingJsonRequestConfiguration = settingsJsonGetRequestConfiguration -> {
                assert settingsJsonGetRequestConfiguration.queryParameters != null;
                assert appId != null;
                settingsJsonGetRequestConfiguration.queryParameters.app = appId;
            };

            GetGeneralAppSettingsResponse getGeneralAppSettingsResponse = client.k().v1().app().settingsJson()
                    .get(settingJsonRequestConfiguration);
            ObjectMapper mapper = new ObjectMapper();
            System.out.println(mapper.writeValueAsString(getGeneralAppSettingsResponse));
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    private static void checkAppDeployed(ApiClient client, String appId) throws InterruptedException {
        Consumer<DeployJsonRequestBuilder.GetRequestConfiguration> requestConfiguration = getRequestConfiguration -> {
            assert getRequestConfiguration.queryParameters != null;
            assert appId != null;
            getRequestConfiguration.queryParameters.apps = List.of(appId).toArray(new String[0]);
        };

        GetAppDeployStatusResponse getAppDeployStatusResponse = client.k().v1().preview().app().deployJson()
                .get(requestConfiguration);
        assert Objects.requireNonNull(getAppDeployStatusResponse).getApps() != null;
        for (GetAppDeployStatusResponseApps status : getAppDeployStatusResponse.getApps()) {
            if (Objects.equals(status.getApp(), appId)
                    && status.getStatus() != GetAppDeployStatusResponseAppsStatus.PROCESSING) {
                System.out.println("deployed!");
                return;
            }

            System.out.println("deploying...");
            sleep(500);
            checkAppDeployed(client, appId);
        }
    }

    private static void errorScenario() {
        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider("Administrator", "cybozu");
        DefaultRequestAdapter requestAdapter = new DefaultRequestAdapter(myAuthenticationProvider);
        requestAdapter.setBaseUrl(BASE_URL);
        ApiClient client = new ApiClient(requestAdapter);

        try {
            UpdateAppAdminNotesRequest updateAppAdminNotesRequest = new UpdateAppAdminNotesRequest();
            updateAppAdminNotesRequest.setApp("aaa");
            UpdateAppAdminNotesResponse resp = client.k().v1().preview().app().adminNotesJson()
                    .put(updateAppAdminNotesRequest);
        } catch (KintoneRestApiError e) {
            ObjectMapper mapper = new ObjectMapper();
            try {
                System.out.println(mapper.writeValueAsString(e));
            } catch (JsonProcessingException e1) {
            }
        }
    }

    private static void apiTokenScenario() {
        String apiToken = "xxx";

        ApiKeyAuthenticationProvider apiKeyAuthenticationProvider = new ApiKeyAuthenticationProvider(
                apiToken,
                "X-Cybozu-API-Token",
                ApiKeyLocation.HEADER
        );
        DefaultRequestAdapter requestAdapter = new DefaultRequestAdapter(apiKeyAuthenticationProvider);
        requestAdapter.setBaseUrl(BASE_URL);
        ApiClient client = new ApiClient(requestAdapter);
        try {
            UpdateAppAdminNotesRequest updateAppAdminNotesRequest = new UpdateAppAdminNotesRequest();
            updateAppAdminNotesRequest.setApp("4");
            updateAppAdminNotesRequest.setContent("by kiota");
            UpdateAppAdminNotesResponse resp = client.k().v1().preview().app().adminNotesJson()
                    .put(updateAppAdminNotesRequest);
            System.out.println(resp);
        } catch (KintoneRestApiError e) {
            ObjectMapper mapper = new ObjectMapper();
            try {
                System.out.println(mapper.writeValueAsString(e));
            } catch (JsonProcessingException e1) {
            }
        }
    }

    private static void uploadFileScenario() {
        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider("Administrator", "cybozu");
        DefaultRequestAdapter requestAdapter = new DefaultRequestAdapter(myAuthenticationProvider);
        requestAdapter.setBaseUrl(BASE_URL);
        ApiClient client = new ApiClient(requestAdapter);
        try {
            MultipartBody uploadFileRequest = new MultipartBody();
            uploadFileRequest.addOrReplacePart("file",  "image/png", "misc/icon/50x50.png", "icon");
            UploadFileResponse uploadFileResponse = client.k().v1().fileJson().post(uploadFileRequest);
            assert uploadFileResponse != null;
            String fileKey = uploadFileResponse.getFileKey();
            System.out.println("---fileKey---");
            System.out.println(fileKey);
        } catch (KintoneRestApiError e) {
            ObjectMapper mapper = new ObjectMapper();
            try {
            System.out.println(mapper.writeValueAsString(e));
            } catch (JsonProcessingException e1) {
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void downloadFileScenario() {
        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider("Administrator", "cybozu");
        DefaultRequestAdapter requestAdapter = new DefaultRequestAdapter(myAuthenticationProvider);
        requestAdapter.setBaseUrl(BASE_URL);
        ApiClient client = new ApiClient(requestAdapter);
        try {
            Consumer<FileJsonRequestBuilder.GetRequestConfiguration> requestConfiguration = fileJsonGetRequestConfiguration -> {
                assert fileJsonGetRequestConfiguration.queryParameters != null;
                fileJsonGetRequestConfiguration.queryParameters.fileKey = "xxx";
            };
            String savePath = "download.gif";
            try (InputStream in = client.k().v1().fileJson().get(requestConfiguration);
                FileOutputStream outputStream = new FileOutputStream(savePath)) {

                    // バッファを使ってデータを読み書き
                    byte[] buffer = new byte[4096];
                    int bytesRead;
                    while ((bytesRead = Objects.requireNonNull(in).read(buffer)) != -1) {
                        outputStream.write(buffer, 0, bytesRead);
                    }

                    System.out.println("ファイルのダウンロードが完了しました: " + savePath);
            };
        } catch (KintoneRestApiError e) {
            ObjectMapper mapper = new ObjectMapper();
            try {
                System.out.println(mapper.writeValueAsString(e));
            } catch (JsonProcessingException e1) {
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void getFieldScenario() {
        MyAuthenticationProvider myAuthenticationProvider = new MyAuthenticationProvider("Administrator", "cybozu");
        DefaultRequestAdapter requestAdapter = new DefaultRequestAdapter(myAuthenticationProvider);
        requestAdapter.setBaseUrl(BASE_URL);
        ApiClient client = new ApiClient(requestAdapter);
        try {
            Consumer<FieldsJsonRequestBuilder.GetRequestConfiguration> requestConfiguration = fieldsJsonGetRequestConfiguration -> {
                assert fieldsJsonGetRequestConfiguration.queryParameters != null;
                fieldsJsonGetRequestConfiguration.queryParameters.app = 11;
                fieldsJsonGetRequestConfiguration.queryParameters.lang = GetLangQueryParameterType.Ja;
            };
            FieldsGetResponse response = client.k().v1().preview().app().form().fieldsJson().get(requestConfiguration);
            ObjectMapper mapper = new ObjectMapper();
            System.out.println(mapper.writeValueAsString(response));
            System.out.println(mapper.writeValueAsString(response.getProperties().getAdditionalData().get("カテゴリー")));
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }

    public static class MyAuthenticationProvider implements AuthenticationProvider {
        private static final String AUTHORIZATION_HEADER_KEY = "X-Cybozu-Authorization";
        private final String encoded;

        public MyAuthenticationProvider(@Nonnull final String username, @Nonnull final String password) {
            Objects.requireNonNull(username);
            Objects.requireNonNull(password);
            this.encoded = Base64.getEncoder()
                    .encodeToString((username + ":" + password).getBytes(StandardCharsets.UTF_8));
        }

        @Override
        public void authenticateRequest(@Nonnull final RequestInformation request,
                @jakarta.annotation.Nullable final Map<String, Object> additionalAuthenticationContext) {
            request.headers.add(AUTHORIZATION_HEADER_KEY, this.encoded);
        }
    }
}
