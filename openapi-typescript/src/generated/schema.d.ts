/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/k/v1/app.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 1件のアプリの情報を取得する。
         * @description 1件のアプリの情報を取得する。
         */
        post: operations["getApp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/preview/app.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description 動作テスト環境にアプリを作成する。 */
        post: operations["addApp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/app/settings.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get general app settings
         * @description Retrieves the general settings of an app in Kintone.
         */
        get: operations["getGeneralAppSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/preview/app/deploy.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get app deploy status
         * @description Retrieves the deployment status of an app in Kintone.
         */
        get: operations["getAppDeployStatus"];
        put?: never;
        /**
         * Deploy App Settings
         * @description Deploys the settings of an app.
         */
        post: operations["deployApp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/apis.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description REST APIの一覧を取得する。 */
        get: operations["getApis"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/apis/{apiId}.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description REST APIの一覧を取得する。 */
        get: operations["getApi"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/app/adminNotes.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get App Admin Notes
         * @description Gets notes for app administrators and their settings.
         */
        get: operations["getAdminNotes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/guest/{SpaceID}/k/v1/app/adminNotes.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAdminNotesGuest"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/preview/app/adminNotes.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get App Admin Notes
         * @description Gets notes for app administrators and their settings.
         */
        get: operations["getAdminNotesPreview"];
        /**
         * Update App Admin Notes
         * @description Update notes for app administrators and their settings.
         */
        put: operations["updateAdminNotes"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/guest/{SpaceID}/k/v1/preview/app/adminNotes.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAdminNotesGuestPreview"];
        /**
         * Update App Admin Notes For Preview
         * @description Update notes for preview app administrators and their settings.
         */
        put: operations["updateAdminNotesPreview"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/file.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a file
         * @description Downloads a file from Kintone.
         */
        get: operations["downloadFile"];
        put?: never;
        /**
         * Upload a file
         * @description Uploads a file to Kintone.
         */
        post: operations["uploadFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/preview/app/form/fields.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Form Fields
         * @description Retrieve the form fields of an app in Kintone
         */
        get: {
            parameters: {
                query: {
                    /** @description The App ID */
                    app: number;
                    /** @description The language setting for the response */
                    lang?: "default" | "en" | "ja" | "zh" | "user";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            revision?: string;
                            properties?: components["schemas"]["FieldProperties"];
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/record.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Record
         * @description Retrieves a record from Kintone.
         */
        get: operations["getRecord"];
        /**
         * Update a Record
         * @description Updates a record in Kintone.
         */
        put: operations["updateRecord"];
        /**
         * Add a Record
         * @description Adds a record to Kintone.
         */
        post: operations["addRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/records.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Records
         * @description Retrieves records from Kintone.
         */
        get: operations["getRecords"];
        /**
         * Update Records
         * @description Updates multiple records in Kintone.
         */
        put: operations["updateRecords"];
        /**
         * Add Records
         * @description Adds multiple records to Kintone.
         */
        post: operations["addRecords"];
        /**
         * Delete records
         * @description Delete multiple records from an app.
         */
        delete: operations["deleteRecords"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/records/cursor.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get records by cursor
         * @description Retrieve records using a cursor.
         */
        get: operations["getRecordsByCursor"];
        put?: never;
        /**
         * Create a cursor
         * @description Create a cursor to retrieve records in batches.
         */
        post: operations["createCursor"];
        /**
         * Delete a cursor
         * @description Delete a cursor to stop retrieving records in batches.
         */
        delete: operations["deleteCursor"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/record/comments.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get record comments
         * @description Retrieve comments for a specific record.
         */
        get: operations["getRecordComments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/record/comment.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a comment to a record
         * @description Add a comment to a specific record in Kintone.
         */
        post: operations["addRecordComment"];
        /**
         * Delete a comment from a record
         * @description Delete a specific comment from a record in Kintone.
         */
        delete: operations["deleteRecordComment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/record/assignees.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update record assignees
         * @description Update the assignees of a specific record in Kintone.
         */
        put: operations["updateRecordAssignees"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/record/status.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update record status
         * @description Update the status of a specific record in Kintone.
         */
        put: operations["updateRecordStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/records/status.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update multiple record statuses
         * @description Update the statuses of multiple records in Kintone.
         */
        put: operations["updateRecordStatuses"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/records/acl/evaluate.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Evaluate record permissions
         * @description Evaluate the permissions of a specific record in Kintone.
         */
        get: operations["evaluateRecordPermissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/k/v1/bulkRequest.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bulk record operations for multiple apps
         * @description Execute multiple API operations on records across multiple apps in a single request.
         */
        post: operations["bulkRecordOperations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Get App Response */
        GetAppResponss: {
            appId?: string;
            code?: string;
            name?: string;
            description?: string;
            spaceId?: string;
            threadId?: string;
            createdAt?: string;
            creator?: {
                code?: string;
                name?: string;
            };
            modifiedAt?: string;
            modifier?: {
                code?: string;
                name?: string;
            };
        };
        /**
         * App Admin Notes
         * @description App Admin Notes
         */
        AdminNotes: {
            content?: string;
            includeInTemplateAndDuplicates?: boolean;
        };
        /** @description Get App Admin Notes Response */
        GetAppAdminNotesResponse: components["schemas"]["AdminNotes"] & {
            revision?: string;
        };
        /** @description Update App Admin Notes Request */
        UpdateAppAdminNotesRequest: components["schemas"]["AdminNotes"] & {
            app?: string;
            revision?: string;
        };
        /** @description Update App Admin Notes Response */
        UpdateAppAdminNotesResponse: {
            revision?: string;
        };
        /** @description Add App Request */
        AddAppRequest: {
            /** @description The name of the app. */
            name: string;
            /** @description The ID of the space where the app will be created. */
            space?: number;
            /** @description The ID of the thread where the app will be created. */
            thread?: number;
        };
        /** @description Add App Response */
        AddAppResponse: {
            /** @description The ID of the created app. */
            app?: string;
            /** @description The revision number of the app. */
            revision?: string;
        };
        /** @description Deploy App Settings Request */
        DeployAppSettingsRequest: {
            apps: {
                /** @description The ID of the app. */
                app?: string;
                /** @description The revision number of the app. */
                revision?: string;
            }[];
        };
        /** @description Deploy App Settings Response */
        DeployAppSettingsResponse: {
            apps?: {
                /** @description The ID of the app. */
                app?: string;
                /** @description The deployment status of the app. */
                status?: string;
            }[];
        };
        /** @description Get General App Settings Response */
        GetGeneralAppSettingsResponse: {
            /** @description The name of the app. */
            name?: string;
            /** @description The description of the app. */
            description?: string;
            icon?: {
                /** @description The type of the icon. */
                type?: string;
                /** @description The key of the icon. */
                key?: string;
            };
            /** @description The theme of the app. */
            theme?: string;
            titleField?: {
                /**
                 * @description The selection mode of the title field.
                 * @enum {string}
                 */
                selectionMode?: "AUTO" | "MANUAL";
                /** @description The code of the title field. */
                code?: string;
            };
            /** @description Whether to enable thumbnails. */
            enableThumbnails?: boolean;
            /** @description Whether to enable bulk deletion. */
            enableBulkDeletion?: boolean;
            /** @description Whether to enable comments. */
            enableComments?: boolean;
            /** @description Whether to enable duplicate record. */
            enableDuplicateRecord?: boolean;
            /** @description Whether to enable inline record editing. */
            enableInlineRecordEditing?: boolean;
            /** @description The number precision. */
            numberPrecision?: {
                /** @description The number of digits. */
                digits?: string;
                /** @description The number of decimal places. */
                decimalPlaces?: string;
                /** @description The rounding mode. */
                roundingMode?: string;
            };
            /** @description The first month of the fiscal year. */
            firstMonthOfFiscalYear?: string;
            /** @description The revision number of the app. */
            revision?: string;
        };
        /** @description Get App Deploy Status Response */
        GetAppDeployStatusResponse: {
            apps?: {
                /** @description The ID of the app. */
                app?: string;
                /**
                 * @description The deployment status of the app.
                 * @enum {string}
                 */
                status?: "PROCESSING" | "SUCCESS" | "FAIL" | "CANCEL";
            }[];
        };
        /** @description Upload File Request */
        UploadFileRequest: {
            /**
             * Format: binary
             * @description The file to upload.
             */
            file: string;
        };
        /** @description Upload File Response */
        UploadFileResponse: {
            /** @description The key of the uploaded file. */
            fileKey?: string;
        };
        /** @description Field Properties */
        FieldProperties: {
            [key: string]: {
                type?: string;
                code?: string;
                label?: string;
                noLabel?: boolean;
                required?: boolean;
                unique?: boolean;
                maxValue?: string;
                minValue?: string;
                maxLength?: string;
                minLength?: string;
                defaultValue?: string;
                defaultNowValue?: boolean;
                align?: string;
                expression?: string;
                hideExpression?: boolean;
                digit?: boolean;
                thumbnailSize?: string;
                protocol?: string;
                format?: string;
                displayScale?: string;
                unit?: string;
                unitPosition?: string;
                entities?: {
                    code?: string;
                    type?: string;
                }[];
                referenceTable?: {
                    relatedApp?: {
                        app?: string;
                        code?: string;
                    };
                    condition?: {
                        field?: string;
                        relatedField?: string;
                    };
                    filterCond?: string;
                    displayFields?: string[];
                    sort?: string;
                    size?: string;
                };
                lookup?: {
                    relatedApp?: {
                        app?: string;
                        code?: string;
                    };
                    relatedKeyField?: string;
                    fieldMappings?: {
                        field?: string;
                        relatedField?: string;
                    }[];
                    lookupPickerFields?: string[];
                    filterCond?: string;
                    sort?: string;
                };
                openGroup?: boolean;
                fields?: components["schemas"]["FieldProperties"];
                enabled?: boolean;
                options?: {
                    [key: string]: {
                        label?: string;
                        index?: number;
                    };
                };
            };
        };
        /** @description The error response. */
        KintoneRestApiError: {
            /**
             * @description The ID of the error.
             * @example 123
             */
            id?: string;
            /**
             * @description The code of the error, to specify the type of error it is.
             * @example GA01
             */
            code?: string;
            /**
             * @description The HTTP status of the response.
             * @example 400
             */
            status?: number;
            /** @description The HTTP headers of the response. */
            headers?: Record<string, never>;
            /**
             * @description The error message.
             * @example The error message.
             */
            message?: string;
            /** @description The index of the failed request when executing bulkRequest and one of the requests fails. This value is undefined otherwise. */
            bulkRequestIndex?: number;
        };
        /** @description The error response. */
        RestApiError: {
            /** @description The ID of the error. */
            id?: string;
            /** @description The code of the error, to specify the type of error it is. */
            code?: string;
            /** @description The error message. */
            message?: string;
        };
    };
    responses: never;
    parameters: {
        /** @description The Guest Space ID. */
        SpaceID: number;
        /** @description Get App Admin Notes Request */
        GetAppAdminNotesRequest: {
            /** @description The App ID. */
            app?: string;
        };
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getApp: {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description メソッドをGETにする
                 * @example {
                 *       "X-HTTP-Method-Override": "GET"
                 *     }
                 */
                "X-HTTP-Method-Override"?: "GET";
            };
            path?: never;
            cookie?: never;
        };
        /** @description GetApp Request Body */
        requestBody?: {
            content: {
                /** @example {
                 *       "id": "123"
                 *     } */
                "application/json": {
                    id: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppResponss"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KintoneRestApiError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KintoneRestApiError"];
                };
            };
        };
    };
    addApp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description response body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddAppRequest"];
            };
        };
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddAppResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getGeneralAppSettings: {
        parameters: {
            query: {
                /** @description The ID of the app. */
                app: string;
                /** @description The language of the response. */
                lang?: "en" | "ja" | "zh" | "user" | "default";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetGeneralAppSettingsResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAppDeployStatus: {
        parameters: {
            query: {
                /** @description The IDs of the apps. */
                apps: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppDeployStatusResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deployApp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    apps?: {
                        app?: string;
                        revision?: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        apps?: {
                            app?: string;
                            revision?: string;
                        }[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
        };
    };
    getApis: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        baseUrl?: string;
                        apis?: {
                            [key: string]: {
                                link?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    getApi: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                apiId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: string;
                        baseUrl?: string;
                        path?: string;
                        httpMethod?: string;
                        request?: {
                            [key: string]: unknown;
                        };
                        response?: {
                            [key: string]: unknown;
                        };
                        schemas?: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
        };
    };
    getAdminNotes: {
        parameters: {
            query?: {
                /** @description Get App Admin Notes Request */
                query?: components["parameters"]["GetAppAdminNotesRequest"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppAdminNotesResponse"];
                };
            };
        };
    };
    getAdminNotesGuest: {
        parameters: {
            query?: {
                /** @description Get App Admin Notes Request */
                query?: components["parameters"]["GetAppAdminNotesRequest"];
            };
            header?: never;
            path: {
                /** @description The Guest Space ID. */
                SpaceID: components["parameters"]["SpaceID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppAdminNotesResponse"];
                };
            };
        };
    };
    getAdminNotesPreview: {
        parameters: {
            query?: {
                /** @description Get App Admin Notes Request */
                query?: components["parameters"]["GetAppAdminNotesRequest"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppAdminNotesResponse"];
                };
            };
        };
    };
    updateAdminNotes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description response body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAppAdminNotesRequest"];
            };
        };
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateAppAdminNotesResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KintoneRestApiError"];
                };
            };
            /** @description Bad Request */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KintoneRestApiError"];
                };
            };
        };
    };
    getAdminNotesGuestPreview: {
        parameters: {
            query?: {
                /** @description Get App Admin Notes Request */
                query?: components["parameters"]["GetAppAdminNotesRequest"];
            };
            header?: never;
            path: {
                /** @description The Guest Space ID. */
                SpaceID: components["parameters"]["SpaceID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppAdminNotesResponse"];
                };
            };
        };
    };
    updateAdminNotesPreview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The Guest Space ID. */
                SpaceID: components["parameters"]["SpaceID"];
            };
            cookie?: never;
        };
        /** @description response body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAppAdminNotesRequest"];
            };
        };
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateAppAdminNotesResponse"];
                };
            };
        };
    };
    downloadFile: {
        parameters: {
            query: {
                /** @description The key of the file to download. */
                fileKey: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description File not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    uploadFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UploadFileRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadFileResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRecord: {
        parameters: {
            query: {
                /** @description The App ID. */
                app: number | string;
                /** @description The Record ID. */
                id: number | string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        record?: {
                            [key: string]: Record<string, never>;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Record not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
    updateRecord: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The App ID. */
                    app?: number | string;
                    /** @description The Record ID. */
                    id?: number | string;
                    /** @description The key to update the record. */
                    updateKey?: {
                        field?: string;
                        value?: string;
                    };
                    /** @description The record to update. */
                    record?: {
                        [key: string]: {
                            value?: string;
                        };
                    };
                    /** @description The expected revision number. */
                    revision?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The revision number of the updated record. */
                        revision?: string;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Record not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
    addRecord: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The App ID. */
                    app?: number;
                    /** @description The record to add. */
                    record?: {
                        [key: string]: {
                            value?: string;
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the added record. */
                        id?: string;
                        /** @description The revision number of the added record. */
                        revision?: string;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description App not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
    getRecords: {
        parameters: {
            query: {
                /** @description The App ID. */
                app: number | string;
                /** @description The query string to filter records. */
                query?: string;
                /** @description The fields to retrieve. */
                fields?: string[];
                /** @description Whether to include the total count of records. */
                totalCount?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        records?: {
                            [key: string]: {
                                type?: string;
                                value?: Record<string, never> | string;
                            };
                        }[];
                        /** @description The total count of records. */
                        totalCount?: string;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Records not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
    updateRecords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The App ID. */
                    app?: number | string;
                    /** @description The records to update. */
                    records?: {
                        /** @description The Record ID. */
                        id?: number | string;
                        /** @description The record to update. */
                        record?: {
                            [key: string]: {
                                value?: string;
                            };
                        };
                        /** @description The expected revision number. */
                        revision?: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        records?: {
                            /** @description The ID of the updated record. */
                            id?: number | string;
                            /** @description The revision number of the updated record. */
                            revision?: string;
                        }[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Record not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
    addRecords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The App ID. */
                    app?: number | string;
                    /** @description The records to add. */
                    records?: {
                        [key: string]: {
                            value?: string;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The IDs of the added records. */
                        ids?: string[];
                        /** @description The revision numbers of the added records. */
                        revisions?: string[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description App not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
    deleteRecords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request payload for deleting records */
        requestBody: {
            content: {
                "application/json": {
                    /** @description The ID of the app. */
                    app: number | string;
                    /** @description The IDs of the records to delete. */
                    ids: number[];
                    /** @description The revision numbers of the records to delete. */
                    revisions?: number[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The revision number of the app. */
                        revision?: string;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
    getRecordsByCursor: {
        parameters: {
            query: {
                /** @description The cursor ID. */
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        records?: {
                            [key: string]: unknown;
                        }[];
                        /** @description Indicates if there are more records to retrieve. */
                        next?: boolean;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
    createCursor: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request payload for creating a cursor */
        requestBody: {
            content: {
                "application/json": {
                    /** @description The ID of the app. */
                    app: number;
                    /** @description The fields to retrieve. */
                    fields?: string[];
                    /** @description The query string to filter records. */
                    query?: string;
                    /** @description The number of records to retrieve in each batch. */
                    size?: number;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created cursor. */
                        id?: string;
                        /** @description The total number of records that match the query. */
                        totalCount?: number;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
    deleteCursor: {
        parameters: {
            query: {
                /** @description The cursor ID. */
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No content, cursor deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
    getRecordComments: {
        parameters: {
            query: {
                /** @description The ID of the app. */
                app: number;
                /** @description The ID of the record. */
                record: number;
                /** @description The order in which to retrieve comments. */
                order?: "asc" | "desc";
                /** @description The offset for pagination. */
                offset?: number;
                /** @description The maximum number of comments to retrieve. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        comments?: {
                            /** @description The ID of the comment. */
                            id?: number;
                            /** @description The text of the comment. */
                            text?: string;
                            /**
                             * Format: date-time
                             * @description The creation time of the comment.
                             */
                            createdAt?: string;
                            creator?: {
                                /** @description The code of the creator. */
                                code?: string;
                                /** @description The name of the creator. */
                                name?: string;
                            };
                        }[];
                        /** @description Indicates if there are older comments. */
                        older?: boolean;
                        /** @description Indicates if there are newer comments. */
                        newer?: boolean;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
    addRecordComment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request payload for adding a comment */
        requestBody: {
            content: {
                "application/json": {
                    /** @description The ID of the app. */
                    app: number;
                    /** @description The ID of the record. */
                    record: number;
                    comment: {
                        /** @description The text of the comment. */
                        text?: string;
                        mentions?: {
                            /** @description The code of the user to mention. */
                            code?: string;
                            /** @description The type of the mention (e.g., USER, GROUP, etc.). */
                            type?: string;
                        }[];
                    };
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the added comment. */
                        id?: number;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
    deleteRecordComment: {
        parameters: {
            query: {
                /** @description The ID of the app. */
                app: number;
                /** @description The ID of the record. */
                record: number;
                /** @description The ID of the comment. */
                comment: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No content, comment deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
    updateRecordAssignees: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request payload for updating assignees */
        requestBody: {
            content: {
                "application/json": {
                    /** @description The ID of the app. */
                    app: number;
                    /** @description The ID of the record. */
                    id: number;
                    /** @description The list of assignees. */
                    assignees: string[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The revision number of the record. */
                        revision?: string;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
    updateRecordStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request payload for updating record status */
        requestBody: {
            content: {
                "application/json": {
                    /** @description The ID of the app. */
                    app: number;
                    /** @description The ID of the record. */
                    id: number;
                    /** @description The action to perform on the record. */
                    action: string;
                    /** @description The assignee of the record. */
                    assignee?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The revision number of the record. */
                        revision?: string;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
    updateRecordStatuses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request payload for updating multiple record statuses */
        requestBody: {
            content: {
                "application/json": {
                    /** @description The ID of the app. */
                    app: number;
                    records: {
                        /** @description The ID of the record. */
                        id: number;
                        /** @description The action to perform on the record. */
                        action: string;
                        /** @description The assignee of the record. */
                        assignee?: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        records?: {
                            /** @description The ID of the record. */
                            id?: number;
                            /** @description The revision number of the record. */
                            revision?: string;
                        }[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
    evaluateRecordPermissions: {
        parameters: {
            query: {
                /** @description The ID of the app. */
                app: number;
                /** @description The IDs of the records. */
                ids: number[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        rights?: {
                            /** @description レコードID */
                            id?: string;
                            record?: {
                                /** @description レコードの閲覧が可能かどうか true：閲覧できる false：閲覧できない メンテナンスモードの場合は、「false」が設定されます。
                                 *      */
                                viewable?: boolean;
                                /** @description レコードの編集が可能かどうか true：編集できる false：編集できない メンテナンスモードの場合は、「false」が設定されます。
                                 *      */
                                editable?: boolean;
                                /** @description レコードの削除が可能かどうか true：削除できる false：削除できない メンテナンスモードの場合は、「false」が設定されます。
                                 *      */
                                deletable?: boolean;
                            };
                            fields?: {
                                [key: string]: {
                                    /** @description フィールドの閲覧が可能かどうか true：閲覧できる false：閲覧できない メンテナンスモードの場合は、「false」が設定されます。
                                     *      */
                                    viewable?: boolean;
                                    /** @description フィールドの編集が可能かどうか true：編集できる false：編集できない メンテナンスモードの場合は、「false」が設定されます。
                                     *      */
                                    editable?: boolean;
                                };
                            };
                        }[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
    bulkRecordOperations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request payload for bulk record operations */
        requestBody: {
            content: {
                "application/json": {
                    requests: {
                        /** @description The HTTP method of the API to be executed. */
                        method: string;
                        /** @description The URL of the API to be executed. */
                        api: string;
                        /** @description The request body to be passed to the API. */
                        payload: {
                            [key: string]: unknown;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        results?: {
                            id?: number;
                            revision?: number;
                        }[];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestApiError"];
                };
            };
        };
    };
}
