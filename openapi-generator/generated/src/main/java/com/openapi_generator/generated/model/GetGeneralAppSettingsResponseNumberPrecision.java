/*
 * Kintone REST API
 * This is an experimental
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openapi_generator.generated.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.openapi_generator.generated.JSON;

/**
 * The number precision.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-29T04:52:36.267360054Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class GetGeneralAppSettingsResponseNumberPrecision {
  public static final String SERIALIZED_NAME_DIGITS = "digits";
  @SerializedName(SERIALIZED_NAME_DIGITS)
  @javax.annotation.Nullable
  private String digits;

  public static final String SERIALIZED_NAME_DECIMAL_PLACES = "decimalPlaces";
  @SerializedName(SERIALIZED_NAME_DECIMAL_PLACES)
  @javax.annotation.Nullable
  private String decimalPlaces;

  public static final String SERIALIZED_NAME_ROUNDING_MODE = "roundingMode";
  @SerializedName(SERIALIZED_NAME_ROUNDING_MODE)
  @javax.annotation.Nullable
  private String roundingMode;

  public GetGeneralAppSettingsResponseNumberPrecision() {
  }

  public GetGeneralAppSettingsResponseNumberPrecision digits(@javax.annotation.Nullable String digits) {
    this.digits = digits;
    return this;
  }

  /**
   * The number of digits.
   * @return digits
   */
  @javax.annotation.Nullable
  public String getDigits() {
    return digits;
  }

  public void setDigits(@javax.annotation.Nullable String digits) {
    this.digits = digits;
  }


  public GetGeneralAppSettingsResponseNumberPrecision decimalPlaces(@javax.annotation.Nullable String decimalPlaces) {
    this.decimalPlaces = decimalPlaces;
    return this;
  }

  /**
   * The number of decimal places.
   * @return decimalPlaces
   */
  @javax.annotation.Nullable
  public String getDecimalPlaces() {
    return decimalPlaces;
  }

  public void setDecimalPlaces(@javax.annotation.Nullable String decimalPlaces) {
    this.decimalPlaces = decimalPlaces;
  }


  public GetGeneralAppSettingsResponseNumberPrecision roundingMode(@javax.annotation.Nullable String roundingMode) {
    this.roundingMode = roundingMode;
    return this;
  }

  /**
   * The rounding mode.
   * @return roundingMode
   */
  @javax.annotation.Nullable
  public String getRoundingMode() {
    return roundingMode;
  }

  public void setRoundingMode(@javax.annotation.Nullable String roundingMode) {
    this.roundingMode = roundingMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetGeneralAppSettingsResponseNumberPrecision getGeneralAppSettingsResponseNumberPrecision = (GetGeneralAppSettingsResponseNumberPrecision) o;
    return Objects.equals(this.digits, getGeneralAppSettingsResponseNumberPrecision.digits) &&
        Objects.equals(this.decimalPlaces, getGeneralAppSettingsResponseNumberPrecision.decimalPlaces) &&
        Objects.equals(this.roundingMode, getGeneralAppSettingsResponseNumberPrecision.roundingMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(digits, decimalPlaces, roundingMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetGeneralAppSettingsResponseNumberPrecision {\n");
    sb.append("    digits: ").append(toIndentedString(digits)).append("\n");
    sb.append("    decimalPlaces: ").append(toIndentedString(decimalPlaces)).append("\n");
    sb.append("    roundingMode: ").append(toIndentedString(roundingMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("digits");
    openapiFields.add("decimalPlaces");
    openapiFields.add("roundingMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetGeneralAppSettingsResponseNumberPrecision
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetGeneralAppSettingsResponseNumberPrecision.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetGeneralAppSettingsResponseNumberPrecision is not found in the empty JSON string", GetGeneralAppSettingsResponseNumberPrecision.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetGeneralAppSettingsResponseNumberPrecision.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetGeneralAppSettingsResponseNumberPrecision` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("digits") != null && !jsonObj.get("digits").isJsonNull()) && !jsonObj.get("digits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digits").toString()));
      }
      if ((jsonObj.get("decimalPlaces") != null && !jsonObj.get("decimalPlaces").isJsonNull()) && !jsonObj.get("decimalPlaces").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decimalPlaces` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decimalPlaces").toString()));
      }
      if ((jsonObj.get("roundingMode") != null && !jsonObj.get("roundingMode").isJsonNull()) && !jsonObj.get("roundingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roundingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roundingMode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetGeneralAppSettingsResponseNumberPrecision.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetGeneralAppSettingsResponseNumberPrecision' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetGeneralAppSettingsResponseNumberPrecision> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetGeneralAppSettingsResponseNumberPrecision.class));

       return (TypeAdapter<T>) new TypeAdapter<GetGeneralAppSettingsResponseNumberPrecision>() {
           @Override
           public void write(JsonWriter out, GetGeneralAppSettingsResponseNumberPrecision value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetGeneralAppSettingsResponseNumberPrecision read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetGeneralAppSettingsResponseNumberPrecision given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetGeneralAppSettingsResponseNumberPrecision
   * @throws IOException if the JSON string is invalid with respect to GetGeneralAppSettingsResponseNumberPrecision
   */
  public static GetGeneralAppSettingsResponseNumberPrecision fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetGeneralAppSettingsResponseNumberPrecision.class);
  }

  /**
   * Convert an instance of GetGeneralAppSettingsResponseNumberPrecision to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

