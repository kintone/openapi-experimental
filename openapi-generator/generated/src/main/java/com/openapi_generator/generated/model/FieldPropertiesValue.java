/*
 * Kintone REST API
 * This is an experimental
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openapi_generator.generated.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.openapi_generator.generated.model.FieldPropertiesValueEntitiesInner;
import com.openapi_generator.generated.model.FieldPropertiesValueLookup;
import com.openapi_generator.generated.model.FieldPropertiesValueOptionsValue;
import com.openapi_generator.generated.model.FieldPropertiesValueReferenceTable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.openapi_generator.generated.JSON;

/**
 * FieldPropertiesValue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-29T04:52:36.267360054Z[Etc/UTC]", comments = "Generator version: 7.11.0-SNAPSHOT")
public class FieldPropertiesValue {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nullable
  private String code;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  @javax.annotation.Nullable
  private String label;

  public static final String SERIALIZED_NAME_NO_LABEL = "noLabel";
  @SerializedName(SERIALIZED_NAME_NO_LABEL)
  @javax.annotation.Nullable
  private Boolean noLabel;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  @javax.annotation.Nullable
  private Boolean required;

  public static final String SERIALIZED_NAME_UNIQUE = "unique";
  @SerializedName(SERIALIZED_NAME_UNIQUE)
  @javax.annotation.Nullable
  private Boolean unique;

  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  @javax.annotation.Nullable
  private String maxValue;

  public static final String SERIALIZED_NAME_MIN_VALUE = "minValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  @javax.annotation.Nullable
  private String minValue;

  public static final String SERIALIZED_NAME_MAX_LENGTH = "maxLength";
  @SerializedName(SERIALIZED_NAME_MAX_LENGTH)
  @javax.annotation.Nullable
  private String maxLength;

  public static final String SERIALIZED_NAME_MIN_LENGTH = "minLength";
  @SerializedName(SERIALIZED_NAME_MIN_LENGTH)
  @javax.annotation.Nullable
  private String minLength;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  @javax.annotation.Nullable
  private String defaultValue;

  public static final String SERIALIZED_NAME_DEFAULT_NOW_VALUE = "defaultNowValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_NOW_VALUE)
  @javax.annotation.Nullable
  private Boolean defaultNowValue;

  public static final String SERIALIZED_NAME_ALIGN = "align";
  @SerializedName(SERIALIZED_NAME_ALIGN)
  @javax.annotation.Nullable
  private String align;

  public static final String SERIALIZED_NAME_EXPRESSION = "expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  @javax.annotation.Nullable
  private String expression;

  public static final String SERIALIZED_NAME_HIDE_EXPRESSION = "hideExpression";
  @SerializedName(SERIALIZED_NAME_HIDE_EXPRESSION)
  @javax.annotation.Nullable
  private Boolean hideExpression;

  public static final String SERIALIZED_NAME_DIGIT = "digit";
  @SerializedName(SERIALIZED_NAME_DIGIT)
  @javax.annotation.Nullable
  private Boolean digit;

  public static final String SERIALIZED_NAME_THUMBNAIL_SIZE = "thumbnailSize";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_SIZE)
  @javax.annotation.Nullable
  private String thumbnailSize;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  @javax.annotation.Nullable
  private String protocol;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  @javax.annotation.Nullable
  private String format;

  public static final String SERIALIZED_NAME_DISPLAY_SCALE = "displayScale";
  @SerializedName(SERIALIZED_NAME_DISPLAY_SCALE)
  @javax.annotation.Nullable
  private String displayScale;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  @javax.annotation.Nullable
  private String unit;

  public static final String SERIALIZED_NAME_UNIT_POSITION = "unitPosition";
  @SerializedName(SERIALIZED_NAME_UNIT_POSITION)
  @javax.annotation.Nullable
  private String unitPosition;

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  @javax.annotation.Nullable
  private List<FieldPropertiesValueEntitiesInner> entities = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERENCE_TABLE = "referenceTable";
  @SerializedName(SERIALIZED_NAME_REFERENCE_TABLE)
  @javax.annotation.Nullable
  private FieldPropertiesValueReferenceTable referenceTable;

  public static final String SERIALIZED_NAME_LOOKUP = "lookup";
  @SerializedName(SERIALIZED_NAME_LOOKUP)
  @javax.annotation.Nullable
  private FieldPropertiesValueLookup lookup;

  public static final String SERIALIZED_NAME_OPEN_GROUP = "openGroup";
  @SerializedName(SERIALIZED_NAME_OPEN_GROUP)
  @javax.annotation.Nullable
  private Boolean openGroup;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  @javax.annotation.Nullable
  private Map<String, FieldPropertiesValue> fields;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  @javax.annotation.Nullable
  private Boolean enabled;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  @javax.annotation.Nullable
  private Map<String, FieldPropertiesValueOptionsValue> options = new HashMap<>();

  public FieldPropertiesValue() {
  }

  public FieldPropertiesValue type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public FieldPropertiesValue code(@javax.annotation.Nullable String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nullable String code) {
    this.code = code;
  }


  public FieldPropertiesValue label(@javax.annotation.Nullable String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(@javax.annotation.Nullable String label) {
    this.label = label;
  }


  public FieldPropertiesValue noLabel(@javax.annotation.Nullable Boolean noLabel) {
    this.noLabel = noLabel;
    return this;
  }

  /**
   * Get noLabel
   * @return noLabel
   */
  @javax.annotation.Nullable
  public Boolean getNoLabel() {
    return noLabel;
  }

  public void setNoLabel(@javax.annotation.Nullable Boolean noLabel) {
    this.noLabel = noLabel;
  }


  public FieldPropertiesValue required(@javax.annotation.Nullable Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Get required
   * @return required
   */
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(@javax.annotation.Nullable Boolean required) {
    this.required = required;
  }


  public FieldPropertiesValue unique(@javax.annotation.Nullable Boolean unique) {
    this.unique = unique;
    return this;
  }

  /**
   * Get unique
   * @return unique
   */
  @javax.annotation.Nullable
  public Boolean getUnique() {
    return unique;
  }

  public void setUnique(@javax.annotation.Nullable Boolean unique) {
    this.unique = unique;
  }


  public FieldPropertiesValue maxValue(@javax.annotation.Nullable String maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * Get maxValue
   * @return maxValue
   */
  @javax.annotation.Nullable
  public String getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(@javax.annotation.Nullable String maxValue) {
    this.maxValue = maxValue;
  }


  public FieldPropertiesValue minValue(@javax.annotation.Nullable String minValue) {
    this.minValue = minValue;
    return this;
  }

  /**
   * Get minValue
   * @return minValue
   */
  @javax.annotation.Nullable
  public String getMinValue() {
    return minValue;
  }

  public void setMinValue(@javax.annotation.Nullable String minValue) {
    this.minValue = minValue;
  }


  public FieldPropertiesValue maxLength(@javax.annotation.Nullable String maxLength) {
    this.maxLength = maxLength;
    return this;
  }

  /**
   * Get maxLength
   * @return maxLength
   */
  @javax.annotation.Nullable
  public String getMaxLength() {
    return maxLength;
  }

  public void setMaxLength(@javax.annotation.Nullable String maxLength) {
    this.maxLength = maxLength;
  }


  public FieldPropertiesValue minLength(@javax.annotation.Nullable String minLength) {
    this.minLength = minLength;
    return this;
  }

  /**
   * Get minLength
   * @return minLength
   */
  @javax.annotation.Nullable
  public String getMinLength() {
    return minLength;
  }

  public void setMinLength(@javax.annotation.Nullable String minLength) {
    this.minLength = minLength;
  }


  public FieldPropertiesValue defaultValue(@javax.annotation.Nullable String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Get defaultValue
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(@javax.annotation.Nullable String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public FieldPropertiesValue defaultNowValue(@javax.annotation.Nullable Boolean defaultNowValue) {
    this.defaultNowValue = defaultNowValue;
    return this;
  }

  /**
   * Get defaultNowValue
   * @return defaultNowValue
   */
  @javax.annotation.Nullable
  public Boolean getDefaultNowValue() {
    return defaultNowValue;
  }

  public void setDefaultNowValue(@javax.annotation.Nullable Boolean defaultNowValue) {
    this.defaultNowValue = defaultNowValue;
  }


  public FieldPropertiesValue align(@javax.annotation.Nullable String align) {
    this.align = align;
    return this;
  }

  /**
   * Get align
   * @return align
   */
  @javax.annotation.Nullable
  public String getAlign() {
    return align;
  }

  public void setAlign(@javax.annotation.Nullable String align) {
    this.align = align;
  }


  public FieldPropertiesValue expression(@javax.annotation.Nullable String expression) {
    this.expression = expression;
    return this;
  }

  /**
   * Get expression
   * @return expression
   */
  @javax.annotation.Nullable
  public String getExpression() {
    return expression;
  }

  public void setExpression(@javax.annotation.Nullable String expression) {
    this.expression = expression;
  }


  public FieldPropertiesValue hideExpression(@javax.annotation.Nullable Boolean hideExpression) {
    this.hideExpression = hideExpression;
    return this;
  }

  /**
   * Get hideExpression
   * @return hideExpression
   */
  @javax.annotation.Nullable
  public Boolean getHideExpression() {
    return hideExpression;
  }

  public void setHideExpression(@javax.annotation.Nullable Boolean hideExpression) {
    this.hideExpression = hideExpression;
  }


  public FieldPropertiesValue digit(@javax.annotation.Nullable Boolean digit) {
    this.digit = digit;
    return this;
  }

  /**
   * Get digit
   * @return digit
   */
  @javax.annotation.Nullable
  public Boolean getDigit() {
    return digit;
  }

  public void setDigit(@javax.annotation.Nullable Boolean digit) {
    this.digit = digit;
  }


  public FieldPropertiesValue thumbnailSize(@javax.annotation.Nullable String thumbnailSize) {
    this.thumbnailSize = thumbnailSize;
    return this;
  }

  /**
   * Get thumbnailSize
   * @return thumbnailSize
   */
  @javax.annotation.Nullable
  public String getThumbnailSize() {
    return thumbnailSize;
  }

  public void setThumbnailSize(@javax.annotation.Nullable String thumbnailSize) {
    this.thumbnailSize = thumbnailSize;
  }


  public FieldPropertiesValue protocol(@javax.annotation.Nullable String protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(@javax.annotation.Nullable String protocol) {
    this.protocol = protocol;
  }


  public FieldPropertiesValue format(@javax.annotation.Nullable String format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(@javax.annotation.Nullable String format) {
    this.format = format;
  }


  public FieldPropertiesValue displayScale(@javax.annotation.Nullable String displayScale) {
    this.displayScale = displayScale;
    return this;
  }

  /**
   * Get displayScale
   * @return displayScale
   */
  @javax.annotation.Nullable
  public String getDisplayScale() {
    return displayScale;
  }

  public void setDisplayScale(@javax.annotation.Nullable String displayScale) {
    this.displayScale = displayScale;
  }


  public FieldPropertiesValue unit(@javax.annotation.Nullable String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(@javax.annotation.Nullable String unit) {
    this.unit = unit;
  }


  public FieldPropertiesValue unitPosition(@javax.annotation.Nullable String unitPosition) {
    this.unitPosition = unitPosition;
    return this;
  }

  /**
   * Get unitPosition
   * @return unitPosition
   */
  @javax.annotation.Nullable
  public String getUnitPosition() {
    return unitPosition;
  }

  public void setUnitPosition(@javax.annotation.Nullable String unitPosition) {
    this.unitPosition = unitPosition;
  }


  public FieldPropertiesValue entities(@javax.annotation.Nullable List<FieldPropertiesValueEntitiesInner> entities) {
    this.entities = entities;
    return this;
  }

  public FieldPropertiesValue addEntitiesItem(FieldPropertiesValueEntitiesInner entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * Get entities
   * @return entities
   */
  @javax.annotation.Nullable
  public List<FieldPropertiesValueEntitiesInner> getEntities() {
    return entities;
  }

  public void setEntities(@javax.annotation.Nullable List<FieldPropertiesValueEntitiesInner> entities) {
    this.entities = entities;
  }


  public FieldPropertiesValue referenceTable(@javax.annotation.Nullable FieldPropertiesValueReferenceTable referenceTable) {
    this.referenceTable = referenceTable;
    return this;
  }

  /**
   * Get referenceTable
   * @return referenceTable
   */
  @javax.annotation.Nullable
  public FieldPropertiesValueReferenceTable getReferenceTable() {
    return referenceTable;
  }

  public void setReferenceTable(@javax.annotation.Nullable FieldPropertiesValueReferenceTable referenceTable) {
    this.referenceTable = referenceTable;
  }


  public FieldPropertiesValue lookup(@javax.annotation.Nullable FieldPropertiesValueLookup lookup) {
    this.lookup = lookup;
    return this;
  }

  /**
   * Get lookup
   * @return lookup
   */
  @javax.annotation.Nullable
  public FieldPropertiesValueLookup getLookup() {
    return lookup;
  }

  public void setLookup(@javax.annotation.Nullable FieldPropertiesValueLookup lookup) {
    this.lookup = lookup;
  }


  public FieldPropertiesValue openGroup(@javax.annotation.Nullable Boolean openGroup) {
    this.openGroup = openGroup;
    return this;
  }

  /**
   * Get openGroup
   * @return openGroup
   */
  @javax.annotation.Nullable
  public Boolean getOpenGroup() {
    return openGroup;
  }

  public void setOpenGroup(@javax.annotation.Nullable Boolean openGroup) {
    this.openGroup = openGroup;
  }


  public FieldPropertiesValue fields(@javax.annotation.Nullable Map<String, FieldPropertiesValue> fields) {
    this.fields = fields;
    return this;
  }

  public FieldPropertiesValue putFieldsItem(String key, FieldPropertiesValue fieldsItem) {
    if (this.fields == null) {
      this.fields = new HashMap<>();
    }
    this.fields.put(key, fieldsItem);
    return this;
  }

  /**
   * Field Properties
   * @return fields
   */
  @javax.annotation.Nullable
  public Map<String, FieldPropertiesValue> getFields() {
    return fields;
  }

  public void setFields(@javax.annotation.Nullable Map<String, FieldPropertiesValue> fields) {
    this.fields = fields;
  }


  public FieldPropertiesValue enabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
  }


  public FieldPropertiesValue options(@javax.annotation.Nullable Map<String, FieldPropertiesValueOptionsValue> options) {
    this.options = options;
    return this;
  }

  public FieldPropertiesValue putOptionsItem(String key, FieldPropertiesValueOptionsValue optionsItem) {
    if (this.options == null) {
      this.options = new HashMap<>();
    }
    this.options.put(key, optionsItem);
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public Map<String, FieldPropertiesValueOptionsValue> getOptions() {
    return options;
  }

  public void setOptions(@javax.annotation.Nullable Map<String, FieldPropertiesValueOptionsValue> options) {
    this.options = options;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldPropertiesValue fieldPropertiesValue = (FieldPropertiesValue) o;
    return Objects.equals(this.type, fieldPropertiesValue.type) &&
        Objects.equals(this.code, fieldPropertiesValue.code) &&
        Objects.equals(this.label, fieldPropertiesValue.label) &&
        Objects.equals(this.noLabel, fieldPropertiesValue.noLabel) &&
        Objects.equals(this.required, fieldPropertiesValue.required) &&
        Objects.equals(this.unique, fieldPropertiesValue.unique) &&
        Objects.equals(this.maxValue, fieldPropertiesValue.maxValue) &&
        Objects.equals(this.minValue, fieldPropertiesValue.minValue) &&
        Objects.equals(this.maxLength, fieldPropertiesValue.maxLength) &&
        Objects.equals(this.minLength, fieldPropertiesValue.minLength) &&
        Objects.equals(this.defaultValue, fieldPropertiesValue.defaultValue) &&
        Objects.equals(this.defaultNowValue, fieldPropertiesValue.defaultNowValue) &&
        Objects.equals(this.align, fieldPropertiesValue.align) &&
        Objects.equals(this.expression, fieldPropertiesValue.expression) &&
        Objects.equals(this.hideExpression, fieldPropertiesValue.hideExpression) &&
        Objects.equals(this.digit, fieldPropertiesValue.digit) &&
        Objects.equals(this.thumbnailSize, fieldPropertiesValue.thumbnailSize) &&
        Objects.equals(this.protocol, fieldPropertiesValue.protocol) &&
        Objects.equals(this.format, fieldPropertiesValue.format) &&
        Objects.equals(this.displayScale, fieldPropertiesValue.displayScale) &&
        Objects.equals(this.unit, fieldPropertiesValue.unit) &&
        Objects.equals(this.unitPosition, fieldPropertiesValue.unitPosition) &&
        Objects.equals(this.entities, fieldPropertiesValue.entities) &&
        Objects.equals(this.referenceTable, fieldPropertiesValue.referenceTable) &&
        Objects.equals(this.lookup, fieldPropertiesValue.lookup) &&
        Objects.equals(this.openGroup, fieldPropertiesValue.openGroup) &&
        Objects.equals(this.fields, fieldPropertiesValue.fields) &&
        Objects.equals(this.enabled, fieldPropertiesValue.enabled) &&
        Objects.equals(this.options, fieldPropertiesValue.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, code, label, noLabel, required, unique, maxValue, minValue, maxLength, minLength, defaultValue, defaultNowValue, align, expression, hideExpression, digit, thumbnailSize, protocol, format, displayScale, unit, unitPosition, entities, referenceTable, lookup, openGroup, fields, enabled, options);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldPropertiesValue {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    noLabel: ").append(toIndentedString(noLabel)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    unique: ").append(toIndentedString(unique)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    maxLength: ").append(toIndentedString(maxLength)).append("\n");
    sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    defaultNowValue: ").append(toIndentedString(defaultNowValue)).append("\n");
    sb.append("    align: ").append(toIndentedString(align)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    hideExpression: ").append(toIndentedString(hideExpression)).append("\n");
    sb.append("    digit: ").append(toIndentedString(digit)).append("\n");
    sb.append("    thumbnailSize: ").append(toIndentedString(thumbnailSize)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    displayScale: ").append(toIndentedString(displayScale)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    unitPosition: ").append(toIndentedString(unitPosition)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    referenceTable: ").append(toIndentedString(referenceTable)).append("\n");
    sb.append("    lookup: ").append(toIndentedString(lookup)).append("\n");
    sb.append("    openGroup: ").append(toIndentedString(openGroup)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("code");
    openapiFields.add("label");
    openapiFields.add("noLabel");
    openapiFields.add("required");
    openapiFields.add("unique");
    openapiFields.add("maxValue");
    openapiFields.add("minValue");
    openapiFields.add("maxLength");
    openapiFields.add("minLength");
    openapiFields.add("defaultValue");
    openapiFields.add("defaultNowValue");
    openapiFields.add("align");
    openapiFields.add("expression");
    openapiFields.add("hideExpression");
    openapiFields.add("digit");
    openapiFields.add("thumbnailSize");
    openapiFields.add("protocol");
    openapiFields.add("format");
    openapiFields.add("displayScale");
    openapiFields.add("unit");
    openapiFields.add("unitPosition");
    openapiFields.add("entities");
    openapiFields.add("referenceTable");
    openapiFields.add("lookup");
    openapiFields.add("openGroup");
    openapiFields.add("fields");
    openapiFields.add("enabled");
    openapiFields.add("options");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FieldPropertiesValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldPropertiesValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldPropertiesValue is not found in the empty JSON string", FieldPropertiesValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FieldPropertiesValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldPropertiesValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("maxValue") != null && !jsonObj.get("maxValue").isJsonNull()) && !jsonObj.get("maxValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxValue").toString()));
      }
      if ((jsonObj.get("minValue") != null && !jsonObj.get("minValue").isJsonNull()) && !jsonObj.get("minValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minValue").toString()));
      }
      if ((jsonObj.get("maxLength") != null && !jsonObj.get("maxLength").isJsonNull()) && !jsonObj.get("maxLength").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxLength` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxLength").toString()));
      }
      if ((jsonObj.get("minLength") != null && !jsonObj.get("minLength").isJsonNull()) && !jsonObj.get("minLength").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minLength` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minLength").toString()));
      }
      if ((jsonObj.get("defaultValue") != null && !jsonObj.get("defaultValue").isJsonNull()) && !jsonObj.get("defaultValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultValue").toString()));
      }
      if ((jsonObj.get("align") != null && !jsonObj.get("align").isJsonNull()) && !jsonObj.get("align").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `align` to be a primitive type in the JSON string but got `%s`", jsonObj.get("align").toString()));
      }
      if ((jsonObj.get("expression") != null && !jsonObj.get("expression").isJsonNull()) && !jsonObj.get("expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expression").toString()));
      }
      if ((jsonObj.get("thumbnailSize") != null && !jsonObj.get("thumbnailSize").isJsonNull()) && !jsonObj.get("thumbnailSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnailSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnailSize").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if ((jsonObj.get("displayScale") != null && !jsonObj.get("displayScale").isJsonNull()) && !jsonObj.get("displayScale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayScale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayScale").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if ((jsonObj.get("unitPosition") != null && !jsonObj.get("unitPosition").isJsonNull()) && !jsonObj.get("unitPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitPosition").toString()));
      }
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull()) {
        JsonArray jsonArrayentities = jsonObj.getAsJsonArray("entities");
        if (jsonArrayentities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
          }

          // validate the optional field `entities` (array)
          for (int i = 0; i < jsonArrayentities.size(); i++) {
            FieldPropertiesValueEntitiesInner.validateJsonElement(jsonArrayentities.get(i));
          };
        }
      }
      // validate the optional field `referenceTable`
      if (jsonObj.get("referenceTable") != null && !jsonObj.get("referenceTable").isJsonNull()) {
        FieldPropertiesValueReferenceTable.validateJsonElement(jsonObj.get("referenceTable"));
      }
      // validate the optional field `lookup`
      if (jsonObj.get("lookup") != null && !jsonObj.get("lookup").isJsonNull()) {
        FieldPropertiesValueLookup.validateJsonElement(jsonObj.get("lookup"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldPropertiesValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldPropertiesValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldPropertiesValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldPropertiesValue.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldPropertiesValue>() {
           @Override
           public void write(JsonWriter out, FieldPropertiesValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldPropertiesValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FieldPropertiesValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FieldPropertiesValue
   * @throws IOException if the JSON string is invalid with respect to FieldPropertiesValue
   */
  public static FieldPropertiesValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldPropertiesValue.class);
  }

  /**
   * Convert an instance of FieldPropertiesValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

