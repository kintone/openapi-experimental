/*
 * Kintone REST API
 * This is an experimental
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openapi_generator.generated.api;

import com.openapi_generator.generated.ApiCallback;
import com.openapi_generator.generated.ApiClient;
import com.openapi_generator.generated.ApiException;
import com.openapi_generator.generated.ApiResponse;
import com.openapi_generator.generated.Configuration;
import com.openapi_generator.generated.Pair;
import com.openapi_generator.generated.ProgressRequestBody;
import com.openapi_generator.generated.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.openapi_generator.generated.model.AddAppRequest;
import com.openapi_generator.generated.model.AddAppResponse;
import com.openapi_generator.generated.model.DeployApp400Response;
import com.openapi_generator.generated.model.DeployAppRequest;
import com.openapi_generator.generated.model.GetAdminNotesQueryParameter;
import com.openapi_generator.generated.model.GetAppAdminNotesResponse;
import com.openapi_generator.generated.model.GetAppDeployStatusResponse;
import com.openapi_generator.generated.model.GetAppRequest;
import com.openapi_generator.generated.model.GetAppResponss;
import com.openapi_generator.generated.model.GetGeneralAppSettingsResponse;
import com.openapi_generator.generated.model.KV1PreviewAppFormFieldsJsonGet200Response;
import com.openapi_generator.generated.model.KintoneRestApiError;
import com.openapi_generator.generated.model.UpdateAppAdminNotesRequest;
import com.openapi_generator.generated.model.UpdateAppAdminNotesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addApp
     * @param addAppRequest response body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAppCall(AddAppRequest addAppRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addAppRequest;

        // create path and map variables
        String localVarPath = "/k/v1/preview/app.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "SessionAuth", "ApiTokenAuth", "PasswordAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAppValidateBeforeCall(AddAppRequest addAppRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addAppRequest' is set
        if (addAppRequest == null) {
            throw new ApiException("Missing the required parameter 'addAppRequest' when calling addApp(Async)");
        }

        return addAppCall(addAppRequest, _callback);

    }

    /**
     * 
     * 動作テスト環境にアプリを作成する。
     * @param addAppRequest response body (required)
     * @return AddAppResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public AddAppResponse addApp(AddAppRequest addAppRequest) throws ApiException {
        ApiResponse<AddAppResponse> localVarResp = addAppWithHttpInfo(addAppRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 動作テスト環境にアプリを作成する。
     * @param addAppRequest response body (required)
     * @return ApiResponse&lt;AddAppResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddAppResponse> addAppWithHttpInfo(AddAppRequest addAppRequest) throws ApiException {
        okhttp3.Call localVarCall = addAppValidateBeforeCall(addAppRequest, null);
        Type localVarReturnType = new TypeToken<AddAppResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 動作テスト環境にアプリを作成する。
     * @param addAppRequest response body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAppAsync(AddAppRequest addAppRequest, final ApiCallback<AddAppResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAppValidateBeforeCall(addAppRequest, _callback);
        Type localVarReturnType = new TypeToken<AddAppResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployApp
     * @param deployAppRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployAppCall(DeployAppRequest deployAppRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployAppRequest;

        // create path and map variables
        String localVarPath = "/k/v1/preview/app/deploy.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "SessionAuth", "ApiTokenAuth", "PasswordAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployAppValidateBeforeCall(DeployAppRequest deployAppRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deployAppRequest' is set
        if (deployAppRequest == null) {
            throw new ApiException("Missing the required parameter 'deployAppRequest' when calling deployApp(Async)");
        }

        return deployAppCall(deployAppRequest, _callback);

    }

    /**
     * Deploy App Settings
     * Deploys the settings of an app.
     * @param deployAppRequest  (required)
     * @return DeployAppRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public DeployAppRequest deployApp(DeployAppRequest deployAppRequest) throws ApiException {
        ApiResponse<DeployAppRequest> localVarResp = deployAppWithHttpInfo(deployAppRequest);
        return localVarResp.getData();
    }

    /**
     * Deploy App Settings
     * Deploys the settings of an app.
     * @param deployAppRequest  (required)
     * @return ApiResponse&lt;DeployAppRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeployAppRequest> deployAppWithHttpInfo(DeployAppRequest deployAppRequest) throws ApiException {
        okhttp3.Call localVarCall = deployAppValidateBeforeCall(deployAppRequest, null);
        Type localVarReturnType = new TypeToken<DeployAppRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploy App Settings (asynchronously)
     * Deploys the settings of an app.
     * @param deployAppRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployAppAsync(DeployAppRequest deployAppRequest, final ApiCallback<DeployAppRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployAppValidateBeforeCall(deployAppRequest, _callback);
        Type localVarReturnType = new TypeToken<DeployAppRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdminNotes
     * @param query Get App Admin Notes Request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdminNotesCall(GetAdminNotesQueryParameter query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/k/v1/app/adminNotes.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "SessionAuth", "ApiTokenAuth", "PasswordAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdminNotesValidateBeforeCall(GetAdminNotesQueryParameter query, final ApiCallback _callback) throws ApiException {
        return getAdminNotesCall(query, _callback);

    }

    /**
     * Get App Admin Notes
     * Gets notes for app administrators and their settings.
     * @param query Get App Admin Notes Request (optional)
     * @return GetAppAdminNotesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetAppAdminNotesResponse getAdminNotes(GetAdminNotesQueryParameter query) throws ApiException {
        ApiResponse<GetAppAdminNotesResponse> localVarResp = getAdminNotesWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * Get App Admin Notes
     * Gets notes for app administrators and their settings.
     * @param query Get App Admin Notes Request (optional)
     * @return ApiResponse&lt;GetAppAdminNotesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAppAdminNotesResponse> getAdminNotesWithHttpInfo(GetAdminNotesQueryParameter query) throws ApiException {
        okhttp3.Call localVarCall = getAdminNotesValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<GetAppAdminNotesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get App Admin Notes (asynchronously)
     * Gets notes for app administrators and their settings.
     * @param query Get App Admin Notes Request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdminNotesAsync(GetAdminNotesQueryParameter query, final ApiCallback<GetAppAdminNotesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdminNotesValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<GetAppAdminNotesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdminNotesGuest
     * @param spaceID The Guest Space ID. (required)
     * @param query Get App Admin Notes Request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdminNotesGuestCall(Integer spaceID, GetAdminNotesQueryParameter query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/guest/{SpaceID}/k/v1/app/adminNotes.json"
            .replace("{" + "SpaceID" + "}", localVarApiClient.escapeString(spaceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "SessionAuth", "ApiTokenAuth", "PasswordAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdminNotesGuestValidateBeforeCall(Integer spaceID, GetAdminNotesQueryParameter query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceID' is set
        if (spaceID == null) {
            throw new ApiException("Missing the required parameter 'spaceID' when calling getAdminNotesGuest(Async)");
        }

        return getAdminNotesGuestCall(spaceID, query, _callback);

    }

    /**
     * 
     * 
     * @param spaceID The Guest Space ID. (required)
     * @param query Get App Admin Notes Request (optional)
     * @return GetAppAdminNotesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetAppAdminNotesResponse getAdminNotesGuest(Integer spaceID, GetAdminNotesQueryParameter query) throws ApiException {
        ApiResponse<GetAppAdminNotesResponse> localVarResp = getAdminNotesGuestWithHttpInfo(spaceID, query);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param spaceID The Guest Space ID. (required)
     * @param query Get App Admin Notes Request (optional)
     * @return ApiResponse&lt;GetAppAdminNotesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAppAdminNotesResponse> getAdminNotesGuestWithHttpInfo(Integer spaceID, GetAdminNotesQueryParameter query) throws ApiException {
        okhttp3.Call localVarCall = getAdminNotesGuestValidateBeforeCall(spaceID, query, null);
        Type localVarReturnType = new TypeToken<GetAppAdminNotesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param spaceID The Guest Space ID. (required)
     * @param query Get App Admin Notes Request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdminNotesGuestAsync(Integer spaceID, GetAdminNotesQueryParameter query, final ApiCallback<GetAppAdminNotesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdminNotesGuestValidateBeforeCall(spaceID, query, _callback);
        Type localVarReturnType = new TypeToken<GetAppAdminNotesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdminNotesGuestPreview
     * @param spaceID The Guest Space ID. (required)
     * @param query Get App Admin Notes Request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdminNotesGuestPreviewCall(Integer spaceID, GetAdminNotesQueryParameter query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/guest/{SpaceID}/k/v1/preview/app/adminNotes.json"
            .replace("{" + "SpaceID" + "}", localVarApiClient.escapeString(spaceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "SessionAuth", "ApiTokenAuth", "PasswordAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdminNotesGuestPreviewValidateBeforeCall(Integer spaceID, GetAdminNotesQueryParameter query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceID' is set
        if (spaceID == null) {
            throw new ApiException("Missing the required parameter 'spaceID' when calling getAdminNotesGuestPreview(Async)");
        }

        return getAdminNotesGuestPreviewCall(spaceID, query, _callback);

    }

    /**
     * 
     * 
     * @param spaceID The Guest Space ID. (required)
     * @param query Get App Admin Notes Request (optional)
     * @return GetAppAdminNotesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetAppAdminNotesResponse getAdminNotesGuestPreview(Integer spaceID, GetAdminNotesQueryParameter query) throws ApiException {
        ApiResponse<GetAppAdminNotesResponse> localVarResp = getAdminNotesGuestPreviewWithHttpInfo(spaceID, query);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param spaceID The Guest Space ID. (required)
     * @param query Get App Admin Notes Request (optional)
     * @return ApiResponse&lt;GetAppAdminNotesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAppAdminNotesResponse> getAdminNotesGuestPreviewWithHttpInfo(Integer spaceID, GetAdminNotesQueryParameter query) throws ApiException {
        okhttp3.Call localVarCall = getAdminNotesGuestPreviewValidateBeforeCall(spaceID, query, null);
        Type localVarReturnType = new TypeToken<GetAppAdminNotesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param spaceID The Guest Space ID. (required)
     * @param query Get App Admin Notes Request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdminNotesGuestPreviewAsync(Integer spaceID, GetAdminNotesQueryParameter query, final ApiCallback<GetAppAdminNotesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdminNotesGuestPreviewValidateBeforeCall(spaceID, query, _callback);
        Type localVarReturnType = new TypeToken<GetAppAdminNotesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdminNotesPreview
     * @param query Get App Admin Notes Request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdminNotesPreviewCall(GetAdminNotesQueryParameter query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/k/v1/preview/app/adminNotes.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "SessionAuth", "ApiTokenAuth", "PasswordAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdminNotesPreviewValidateBeforeCall(GetAdminNotesQueryParameter query, final ApiCallback _callback) throws ApiException {
        return getAdminNotesPreviewCall(query, _callback);

    }

    /**
     * Get App Admin Notes
     * Gets notes for app administrators and their settings.
     * @param query Get App Admin Notes Request (optional)
     * @return GetAppAdminNotesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetAppAdminNotesResponse getAdminNotesPreview(GetAdminNotesQueryParameter query) throws ApiException {
        ApiResponse<GetAppAdminNotesResponse> localVarResp = getAdminNotesPreviewWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * Get App Admin Notes
     * Gets notes for app administrators and their settings.
     * @param query Get App Admin Notes Request (optional)
     * @return ApiResponse&lt;GetAppAdminNotesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAppAdminNotesResponse> getAdminNotesPreviewWithHttpInfo(GetAdminNotesQueryParameter query) throws ApiException {
        okhttp3.Call localVarCall = getAdminNotesPreviewValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<GetAppAdminNotesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get App Admin Notes (asynchronously)
     * Gets notes for app administrators and their settings.
     * @param query Get App Admin Notes Request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdminNotesPreviewAsync(GetAdminNotesQueryParameter query, final ApiCallback<GetAppAdminNotesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdminNotesPreviewValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<GetAppAdminNotesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApp
     * @param xHTTPMethodOverride メソッドをGETにする (optional, default to GET)
     * @param getAppRequest GetApp Request Body (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppCall(String xHTTPMethodOverride, GetAppRequest getAppRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getAppRequest;

        // create path and map variables
        String localVarPath = "/k/v1/app.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xHTTPMethodOverride != null) {
            localVarHeaderParams.put("X-HTTP-Method-Override", localVarApiClient.parameterToString(xHTTPMethodOverride));
        }


        String[] localVarAuthNames = new String[] { "SessionAuth", "ApiTokenAuth", "PasswordAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppValidateBeforeCall(String xHTTPMethodOverride, GetAppRequest getAppRequest, final ApiCallback _callback) throws ApiException {
        return getAppCall(xHTTPMethodOverride, getAppRequest, _callback);

    }

    /**
     * 1件のアプリの情報を取得する。
     * 1件のアプリの情報を取得する。
     * @param xHTTPMethodOverride メソッドをGETにする (optional, default to GET)
     * @param getAppRequest GetApp Request Body (optional)
     * @return GetAppResponss
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetAppResponss getApp(String xHTTPMethodOverride, GetAppRequest getAppRequest) throws ApiException {
        ApiResponse<GetAppResponss> localVarResp = getAppWithHttpInfo(xHTTPMethodOverride, getAppRequest);
        return localVarResp.getData();
    }

    /**
     * 1件のアプリの情報を取得する。
     * 1件のアプリの情報を取得する。
     * @param xHTTPMethodOverride メソッドをGETにする (optional, default to GET)
     * @param getAppRequest GetApp Request Body (optional)
     * @return ApiResponse&lt;GetAppResponss&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAppResponss> getAppWithHttpInfo(String xHTTPMethodOverride, GetAppRequest getAppRequest) throws ApiException {
        okhttp3.Call localVarCall = getAppValidateBeforeCall(xHTTPMethodOverride, getAppRequest, null);
        Type localVarReturnType = new TypeToken<GetAppResponss>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 1件のアプリの情報を取得する。 (asynchronously)
     * 1件のアプリの情報を取得する。
     * @param xHTTPMethodOverride メソッドをGETにする (optional, default to GET)
     * @param getAppRequest GetApp Request Body (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppAsync(String xHTTPMethodOverride, GetAppRequest getAppRequest, final ApiCallback<GetAppResponss> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppValidateBeforeCall(xHTTPMethodOverride, getAppRequest, _callback);
        Type localVarReturnType = new TypeToken<GetAppResponss>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAppDeployStatus
     * @param apps The IDs of the apps. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppDeployStatusCall(List<String> apps, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/k/v1/preview/app/deploy.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apps != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "apps", apps));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "SessionAuth", "ApiTokenAuth", "PasswordAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppDeployStatusValidateBeforeCall(List<String> apps, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apps' is set
        if (apps == null) {
            throw new ApiException("Missing the required parameter 'apps' when calling getAppDeployStatus(Async)");
        }

        return getAppDeployStatusCall(apps, _callback);

    }

    /**
     * Get app deploy status
     * Retrieves the deployment status of an app in Kintone.
     * @param apps The IDs of the apps. (required)
     * @return GetAppDeployStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetAppDeployStatusResponse getAppDeployStatus(List<String> apps) throws ApiException {
        ApiResponse<GetAppDeployStatusResponse> localVarResp = getAppDeployStatusWithHttpInfo(apps);
        return localVarResp.getData();
    }

    /**
     * Get app deploy status
     * Retrieves the deployment status of an app in Kintone.
     * @param apps The IDs of the apps. (required)
     * @return ApiResponse&lt;GetAppDeployStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAppDeployStatusResponse> getAppDeployStatusWithHttpInfo(List<String> apps) throws ApiException {
        okhttp3.Call localVarCall = getAppDeployStatusValidateBeforeCall(apps, null);
        Type localVarReturnType = new TypeToken<GetAppDeployStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get app deploy status (asynchronously)
     * Retrieves the deployment status of an app in Kintone.
     * @param apps The IDs of the apps. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppDeployStatusAsync(List<String> apps, final ApiCallback<GetAppDeployStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppDeployStatusValidateBeforeCall(apps, _callback);
        Type localVarReturnType = new TypeToken<GetAppDeployStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeneralAppSettings
     * @param app The ID of the app. (required)
     * @param lang The language of the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneralAppSettingsCall(String app, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/k/v1/app/settings.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (app != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app", app));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "SessionAuth", "ApiTokenAuth", "PasswordAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeneralAppSettingsValidateBeforeCall(String app, String lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling getGeneralAppSettings(Async)");
        }

        return getGeneralAppSettingsCall(app, lang, _callback);

    }

    /**
     * Get general app settings
     * Retrieves the general settings of an app in Kintone.
     * @param app The ID of the app. (required)
     * @param lang The language of the response. (optional)
     * @return GetGeneralAppSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetGeneralAppSettingsResponse getGeneralAppSettings(String app, String lang) throws ApiException {
        ApiResponse<GetGeneralAppSettingsResponse> localVarResp = getGeneralAppSettingsWithHttpInfo(app, lang);
        return localVarResp.getData();
    }

    /**
     * Get general app settings
     * Retrieves the general settings of an app in Kintone.
     * @param app The ID of the app. (required)
     * @param lang The language of the response. (optional)
     * @return ApiResponse&lt;GetGeneralAppSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGeneralAppSettingsResponse> getGeneralAppSettingsWithHttpInfo(String app, String lang) throws ApiException {
        okhttp3.Call localVarCall = getGeneralAppSettingsValidateBeforeCall(app, lang, null);
        Type localVarReturnType = new TypeToken<GetGeneralAppSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get general app settings (asynchronously)
     * Retrieves the general settings of an app in Kintone.
     * @param app The ID of the app. (required)
     * @param lang The language of the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeneralAppSettingsAsync(String app, String lang, final ApiCallback<GetGeneralAppSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeneralAppSettingsValidateBeforeCall(app, lang, _callback);
        Type localVarReturnType = new TypeToken<GetGeneralAppSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kV1PreviewAppFormFieldsJsonGet
     * @param app The App ID (required)
     * @param lang The language setting for the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kV1PreviewAppFormFieldsJsonGetCall(Integer app, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/k/v1/preview/app/form/fields.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (app != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app", app));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "SessionAuth", "ApiTokenAuth", "PasswordAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kV1PreviewAppFormFieldsJsonGetValidateBeforeCall(Integer app, String lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling kV1PreviewAppFormFieldsJsonGet(Async)");
        }

        return kV1PreviewAppFormFieldsJsonGetCall(app, lang, _callback);

    }

    /**
     * Get Form Fields
     * Retrieve the form fields of an app in Kintone
     * @param app The App ID (required)
     * @param lang The language setting for the response (optional)
     * @return KV1PreviewAppFormFieldsJsonGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public KV1PreviewAppFormFieldsJsonGet200Response kV1PreviewAppFormFieldsJsonGet(Integer app, String lang) throws ApiException {
        ApiResponse<KV1PreviewAppFormFieldsJsonGet200Response> localVarResp = kV1PreviewAppFormFieldsJsonGetWithHttpInfo(app, lang);
        return localVarResp.getData();
    }

    /**
     * Get Form Fields
     * Retrieve the form fields of an app in Kintone
     * @param app The App ID (required)
     * @param lang The language setting for the response (optional)
     * @return ApiResponse&lt;KV1PreviewAppFormFieldsJsonGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KV1PreviewAppFormFieldsJsonGet200Response> kV1PreviewAppFormFieldsJsonGetWithHttpInfo(Integer app, String lang) throws ApiException {
        okhttp3.Call localVarCall = kV1PreviewAppFormFieldsJsonGetValidateBeforeCall(app, lang, null);
        Type localVarReturnType = new TypeToken<KV1PreviewAppFormFieldsJsonGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Form Fields (asynchronously)
     * Retrieve the form fields of an app in Kintone
     * @param app The App ID (required)
     * @param lang The language setting for the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kV1PreviewAppFormFieldsJsonGetAsync(Integer app, String lang, final ApiCallback<KV1PreviewAppFormFieldsJsonGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = kV1PreviewAppFormFieldsJsonGetValidateBeforeCall(app, lang, _callback);
        Type localVarReturnType = new TypeToken<KV1PreviewAppFormFieldsJsonGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAdminNotes
     * @param updateAppAdminNotesRequest response body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdminNotesCall(UpdateAppAdminNotesRequest updateAppAdminNotesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAppAdminNotesRequest;

        // create path and map variables
        String localVarPath = "/k/v1/preview/app/adminNotes.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "SessionAuth", "ApiTokenAuth", "PasswordAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAdminNotesValidateBeforeCall(UpdateAppAdminNotesRequest updateAppAdminNotesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAppAdminNotesRequest' is set
        if (updateAppAdminNotesRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAppAdminNotesRequest' when calling updateAdminNotes(Async)");
        }

        return updateAdminNotesCall(updateAppAdminNotesRequest, _callback);

    }

    /**
     * Update App Admin Notes
     * Update notes for app administrators and their settings.
     * @param updateAppAdminNotesRequest response body (required)
     * @return UpdateAppAdminNotesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAppAdminNotesResponse updateAdminNotes(UpdateAppAdminNotesRequest updateAppAdminNotesRequest) throws ApiException {
        ApiResponse<UpdateAppAdminNotesResponse> localVarResp = updateAdminNotesWithHttpInfo(updateAppAdminNotesRequest);
        return localVarResp.getData();
    }

    /**
     * Update App Admin Notes
     * Update notes for app administrators and their settings.
     * @param updateAppAdminNotesRequest response body (required)
     * @return ApiResponse&lt;UpdateAppAdminNotesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAppAdminNotesResponse> updateAdminNotesWithHttpInfo(UpdateAppAdminNotesRequest updateAppAdminNotesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAdminNotesValidateBeforeCall(updateAppAdminNotesRequest, null);
        Type localVarReturnType = new TypeToken<UpdateAppAdminNotesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update App Admin Notes (asynchronously)
     * Update notes for app administrators and their settings.
     * @param updateAppAdminNotesRequest response body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdminNotesAsync(UpdateAppAdminNotesRequest updateAppAdminNotesRequest, final ApiCallback<UpdateAppAdminNotesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAdminNotesValidateBeforeCall(updateAppAdminNotesRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateAppAdminNotesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAdminNotesPreview
     * @param spaceID The Guest Space ID. (required)
     * @param updateAppAdminNotesRequest response body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdminNotesPreviewCall(Integer spaceID, UpdateAppAdminNotesRequest updateAppAdminNotesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAppAdminNotesRequest;

        // create path and map variables
        String localVarPath = "/guest/{SpaceID}/k/v1/preview/app/adminNotes.json"
            .replace("{" + "SpaceID" + "}", localVarApiClient.escapeString(spaceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "SessionAuth", "ApiTokenAuth", "PasswordAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAdminNotesPreviewValidateBeforeCall(Integer spaceID, UpdateAppAdminNotesRequest updateAppAdminNotesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceID' is set
        if (spaceID == null) {
            throw new ApiException("Missing the required parameter 'spaceID' when calling updateAdminNotesPreview(Async)");
        }

        // verify the required parameter 'updateAppAdminNotesRequest' is set
        if (updateAppAdminNotesRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAppAdminNotesRequest' when calling updateAdminNotesPreview(Async)");
        }

        return updateAdminNotesPreviewCall(spaceID, updateAppAdminNotesRequest, _callback);

    }

    /**
     * Update App Admin Notes For Preview
     * Update notes for preview app administrators and their settings.
     * @param spaceID The Guest Space ID. (required)
     * @param updateAppAdminNotesRequest response body (required)
     * @return UpdateAppAdminNotesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAppAdminNotesResponse updateAdminNotesPreview(Integer spaceID, UpdateAppAdminNotesRequest updateAppAdminNotesRequest) throws ApiException {
        ApiResponse<UpdateAppAdminNotesResponse> localVarResp = updateAdminNotesPreviewWithHttpInfo(spaceID, updateAppAdminNotesRequest);
        return localVarResp.getData();
    }

    /**
     * Update App Admin Notes For Preview
     * Update notes for preview app administrators and their settings.
     * @param spaceID The Guest Space ID. (required)
     * @param updateAppAdminNotesRequest response body (required)
     * @return ApiResponse&lt;UpdateAppAdminNotesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAppAdminNotesResponse> updateAdminNotesPreviewWithHttpInfo(Integer spaceID, UpdateAppAdminNotesRequest updateAppAdminNotesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAdminNotesPreviewValidateBeforeCall(spaceID, updateAppAdminNotesRequest, null);
        Type localVarReturnType = new TypeToken<UpdateAppAdminNotesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update App Admin Notes For Preview (asynchronously)
     * Update notes for preview app administrators and their settings.
     * @param spaceID The Guest Space ID. (required)
     * @param updateAppAdminNotesRequest response body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdminNotesPreviewAsync(Integer spaceID, UpdateAppAdminNotesRequest updateAppAdminNotesRequest, final ApiCallback<UpdateAppAdminNotesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAdminNotesPreviewValidateBeforeCall(spaceID, updateAppAdminNotesRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateAppAdminNotesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
