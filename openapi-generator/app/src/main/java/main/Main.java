/*
 * This source file was generated by the Gradle 'init' task
 */
package main;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.openapi_generator.generated.ApiClient;
import com.openapi_generator.generated.ApiException;
import com.openapi_generator.generated.Configuration;
import com.openapi_generator.generated.api.ApisApi;
import com.openapi_generator.generated.api.AppApi;
import com.openapi_generator.generated.api.FileApi;
import com.openapi_generator.generated.auth.ApiKeyAuth;
import com.openapi_generator.generated.model.AddAppRequest;
import com.openapi_generator.generated.model.AddAppResponse;
import com.openapi_generator.generated.model.DeployAppRequest;
import com.openapi_generator.generated.model.DeployAppRequestAppsInner;
import com.openapi_generator.generated.model.GetApis200Response;
import com.openapi_generator.generated.model.GetAppDeployStatusResponse;
import com.openapi_generator.generated.model.GetAppDeployStatusResponseAppsInner;
import com.openapi_generator.generated.model.GetGeneralAppSettingsResponse;
import com.openapi_generator.generated.model.KV1PreviewAppFormFieldsJsonGet200Response;
import com.openapi_generator.generated.model.UpdateAppAdminNotesRequest;
import com.openapi_generator.generated.model.UpdateAppAdminNotesResponse;
import com.openapi_generator.generated.model.UploadFileResponse;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.List;
import java.util.Objects;

import static java.lang.Thread.*;

public class Main {
     private static final String BASE_URL = "http://localhost";
     private static final String USER_NAME = "Administrator";
        private static final String PASSWORD = "cybozu";

    public static void main(String[] args) {
//        uploadFileScenario();
//        downloadFileScenario();
//        anoymousScenario();
//        createAppScenario();
//        errorScenario();
        getFieldScenario();
    }

    private static void anoymousScenario() {
        ApiClient defaultClient = Configuration.getDefaultApiClient().setBasePath(BASE_URL);
        ApiKeyAuth PasswordAuth = (ApiKeyAuth) defaultClient.getAuthentication("PasswordAuth");
        PasswordAuth.setApiKey(Base64.getEncoder().encodeToString((USER_NAME + ":" + PASSWORD).getBytes(StandardCharsets.UTF_8)));
        // or
        // ApiClient defaultClient = Configuration.getDefaultApiClient().setBasePath(BASE_URL).addDefaultHeader("X-Cybozu-Authorization", Base64.getEncoder().encodeToString((USER_NAME + ":" + PASSWORD).getBytes(StandardCharsets.UTF_8)));

        ApisApi apiInstance = new ApisApi(defaultClient);
        try {
            GetApis200Response resp = apiInstance.getApis();
            System.out.println(resp);
        } catch (ApiException e) {
            System.err.println("Exception when calling ApisApi#getApi");
            System.err.println("Status code: " + e.getCode());
            System.err.println("Reason: " + e.getResponseBody());
            System.err.println("Response headers: " + e.getResponseHeaders());
            e.printStackTrace();
        }
    }

    private static void createAppScenario() {
        ApiClient defaultClient = Configuration.getDefaultApiClient().setBasePath(BASE_URL);
        ApiKeyAuth PasswordAuth = (ApiKeyAuth) defaultClient.getAuthentication("PasswordAuth");
        PasswordAuth.setApiKey(Base64.getEncoder().encodeToString((USER_NAME + ":" + PASSWORD).getBytes(StandardCharsets.UTF_8)));
        AppApi appClient = new AppApi(defaultClient);

        try {
            AddAppRequest req = new AddAppRequest();
            req.setName("アプリ名");
            AddAppResponse resp = appClient.addApp(req);
            String appId = resp.getApp();

            DeployAppRequestAppsInner app = new DeployAppRequestAppsInner();
            app.setApp(appId);
            DeployAppRequest deployAppRequest = new DeployAppRequest();
            deployAppRequest.setApps(List.of(app));

            appClient.deployApp(deployAppRequest);
            checkAppDeployed(appClient, appId);

            GetGeneralAppSettingsResponse getGeneralAppSettingsResponse = appClient.getGeneralAppSettings(appId, "ja");

            ObjectMapper mapper = new ObjectMapper();
            System.out.println(mapper.writeValueAsString(getGeneralAppSettingsResponse));
        } catch (ApiException e) {
            throw new RuntimeException(e);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }

    private static void checkAppDeployed(AppApi client, String appId) throws InterruptedException, ApiException {
        GetAppDeployStatusResponse resp = client.getAppDeployStatus(List.of(appId));
        for (GetAppDeployStatusResponseAppsInner status : Objects.requireNonNull(resp.getApps())) {
            if (Objects.equals(status.getApp(), appId)
                    && status.getStatus() != GetAppDeployStatusResponseAppsInner.StatusEnum.PROCESSING) {
                System.out.println("deployed!");
                return;
            }

            System.out.println("deploying...");
            sleep(500);
            checkAppDeployed(client, appId);
        }
    }

    private static void errorScenario() {
        ApiClient defaultClient = Configuration.getDefaultApiClient().setBasePath(BASE_URL);
        ApiKeyAuth PasswordAuth = (ApiKeyAuth) defaultClient.getAuthentication("PasswordAuth");
        PasswordAuth.setApiKey(Base64.getEncoder().encodeToString((USER_NAME + ":" + PASSWORD).getBytes(StandardCharsets.UTF_8)));
        AppApi appClient = new AppApi(defaultClient);

        try {
            UpdateAppAdminNotesRequest updateAppAdminNotesRequest = new UpdateAppAdminNotesRequest();
            updateAppAdminNotesRequest.setApp("aaa");
            UpdateAppAdminNotesResponse resp = appClient.updateAdminNotes(updateAppAdminNotesRequest);
        } catch (ApiException e) {
            throw new RuntimeException(e);
//        } catch (KintoneRestApiError ke) {
//            throw new RuntimeException(ke);
        }
    }

    private static void uploadFileScenario() {
        ApiClient defaultClient = Configuration.getDefaultApiClient().setBasePath(BASE_URL);
        ApiKeyAuth PasswordAuth = (ApiKeyAuth) defaultClient.getAuthentication("PasswordAuth");
        PasswordAuth.setApiKey(Base64.getEncoder().encodeToString((USER_NAME + ":" + PASSWORD).getBytes(StandardCharsets.UTF_8)));
        FileApi fileApi = new FileApi(defaultClient);
        try {
            File uploadFile = new File("misc/icon/50x50.png");
            UploadFileResponse resp = fileApi.uploadFile(uploadFile);
            assert resp != null;
            String fileKey = resp.getFileKey();
            System.out.println("---fileKey---");
            System.out.println(fileKey);
        } catch (ApiException e) {
            ObjectMapper mapper = new ObjectMapper();
            try {
                System.out.println(mapper.writeValueAsString(e));
            } catch (JsonProcessingException e1) {
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void downloadFileScenario() {
        ApiClient defaultClient = Configuration.getDefaultApiClient().setBasePath(BASE_URL);
        ApiKeyAuth PasswordAuth = (ApiKeyAuth) defaultClient.getAuthentication("PasswordAuth");
        PasswordAuth.setApiKey(Base64.getEncoder().encodeToString((USER_NAME + ":" + PASSWORD).getBytes(StandardCharsets.UTF_8)));
        FileApi fileClient = new FileApi(defaultClient);
        try {
            File downloadedFile = fileClient.downloadFile("20241129083511B57523BC8F5243A09EE294ABBC61CC9B081");
            File saveFile = new File("download.png");
            // ファイルを移動
            if (downloadedFile.renameTo(saveFile)) {
                System.out.println("File moved successfully to: " + saveFile.getAbsolutePath());
            } else {
                System.err.println("Failed to move the file.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void getFieldScenario() {
        ApiClient defaultClient = Configuration.getDefaultApiClient().setBasePath(BASE_URL);
        ApiKeyAuth PasswordAuth = (ApiKeyAuth) defaultClient.getAuthentication("PasswordAuth");
        PasswordAuth.setApiKey(Base64.getEncoder().encodeToString((USER_NAME + ":" + PASSWORD).getBytes(StandardCharsets.UTF_8)));
        AppApi appClient = new AppApi(defaultClient);
        try {
            KV1PreviewAppFormFieldsJsonGet200Response resp = appClient.kV1PreviewAppFormFieldsJsonGet(3, "ja");
            ObjectMapper mapper = new ObjectMapper();
            System.out.println(mapper.writeValueAsString(resp));
            System.out.println(mapper.writeValueAsString(resp.getProperties().get("カテゴリー")));
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        } catch (ApiException e) {
            throw new RuntimeException(e);
        }
    }
}
